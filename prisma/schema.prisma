generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
 
  firstName     String?
  lastName      String?
  address       String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  invoices      Invoice[]
  stripeSettings StripeSettings?
  subscription   Subscription?
  invoiceCount   Int            @default(0)
  agentUsage     Int            @default(0)
  customInvoiceTemplate String? @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?   @db.Text
  access_token      String?   @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?   @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@index([userId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Invoice {
  id String @id @default(uuid())

  invoiceName   String
  total         Int
  status        InvoiceStatus
  date          DateTime
  paidAt        DateTime?
  dueDate       Int
  fromName      String
  fromEmail     String
  fromAddress   String
  clientName    String
  clientEmail   String
  clientAddress String
  currency      CurrencyType @default(USD)
  invoiceNumber Int
  note          String?

  invoiceItemDescription String
  invoiceItemQuantity    Int
  invoiceItemRate        Int

  // Payment tracking fields
  stripePaymentId        String?
  stripePaymentIntentId  String?
  stripeCheckoutSessionId String?
  paymentMethod          PaymentMethod? @default(EMAIL)
  paymentLink            String?
  paymentDetails         PaymentDetails?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model PaymentDetails {
  id              String   @id @default(cuid())
  invoiceId       String   @unique
  invoice         Invoice  @relation(fields: [invoiceId], references: [id])
  amount          Int
  currency        CurrencyType
  paymentIntentId String
  customerEmail   String
  paymentStatus   String
  paymentMethod   String
  receiptEmail    String?
  receiptUrl      String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([invoiceId])
}

enum InvoiceStatus {
  PAID
  PENDING
  OVERDUE
}

enum PaymentMethod {
  EMAIL
  STRIPE
  MANUAL
}

enum CurrencyType {
  USD
  EUR
  GBP
  CAD
  AUD
  INR
}

model StripeSettings {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeApiKey    String   @db.Text
  stripeSecretKey String   @db.Text
  isConnected     Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([userId])
}

model Subscription {
  id                   String           @id @default(cuid())
  userId               String           @unique
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType             SubscriptionPlan
  status               PaymentStatus
  currentPeriodEnd     DateTime?
  stripeSubscriptionId String?
  stripeCustomerId     String?
  cancelAtPeriodEnd    Boolean         @default(false)
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt

  @@index([userId])
}
enum SubscriptionPlan {
  FREE
  PRO_MONTHLY
  PRO_YEARLY
}


enum PaymentStatus {
  ACTIVE
  INACTIVE
  PAST_DUE
  CANCELLED
  PENDING
}